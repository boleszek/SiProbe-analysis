'''
This script does the following:                                                   
    - Loads LFP data, subsamples at 10x, saves in flat binary format
    - Loads, rearanges, and saves high pass data in flat binary format for later clustering
        with Klusta                                                                          
    - Prepares prm file


Notes                                                                             
    - Continuous low pass data files have source 102 (1 per session)                  
    - Continuous high pass data files have source 103 (32 per session)                
    - Data and prm files for each shank are saved seperately in subfolders shank1 & shank2
'''

import numpy as np
import os
import sys
sys.path.append('/Volumes/kaylab-1/Code.Repository/Python/')

import OpenEphys

#=============================== CHOOSE FILE DIRECTORIES ======================#    
ddir = '/Volumes/kaylab-1/DataStores/Data/BO/SiProbe/' # data directory             
# choose data folders where files are stored                                         
# dfold_list = 'RK90_2016-07-29_raw_30k_1min_S-Lim'                 
match_str = ['2016-07-29','2016-08-15'] # list of strs in all files of interest (usually date of exp)
dfold_list = []
ddir_list = os.listdir(ddir)
for file in ddir_list:
    for i in range(len(match_str)):
        if match_str[i] in file:
            dfold_list.append(file)
            
#==============================================================================#    
ntot = len(dfold_list)
ind = 0

for dfold in dfold_list:
    ind = ind+1
    nrem = ntot - ind
    print('Converting '+dfold+': '+str(nrem)+' remaining')

    folderpath = ddir + dfold # folderpath where data is stored 
    
    #=============== SUBSAMPLE LOWPASS (LFP) SIGNAL AND CONVERT TO DAT ===========#
    lfpname = '102_CH2.continuous'
    filepath = ddir + dfold + '/' + lfpname
    LFP = OpenEphys.loadContinuous(filepath, dtype=float)
    LFP = LFP['data']
    ssLFP = LFP[::10].copy() #subsampled LFP
    # save as dat file
    datnameLFP = dfold + '_LFP.dat'
    ssLFP.tofile(os.path.join(folderpath,datnameLFP))
    #==============================================================================#
    
    #======================== CONVERT HIGHPASS SIGNALS TO DAT ======================#
    # Load highpass signals of each sahnk in geometric order (bottom of shank to top)   
    # then save to flat binary file                                                                             

    # create shank1 and shank2 folders                                                  
    os.makedirs(folderpath + '/shank1')
    os.makedirs(folderpath + '/shank2')

    # shnk1chan = [6, 8, 7, 9, 12, 14, 1, 2, 10, 16, 4, 13, 5, 15, 3, 11]               
    shnk1chan = [12, 14, 1, 2, 10, 16, 4, 13, 5, 15, 3, 11] # ch 6 7 8 9 are bad        
    shnk2chan = [28, 26, 25, 23, 22, 20, 31, 32, 24, 18, 30, 19, 27, 17, 29, 21]

    # use the folder name to name individual dat files                                  
    datname1 = dfold + '_shank1.dat'
    OpenEphys.pack_2(folderpath, filename = 'shank1/' + datname1, source = '103',
                     channels = shnk1chan, dref=None)

    datname2 = dfold + '_shank2.dat'
    OpenEphys.pack_2(folderpath, filename = 'shank2/' + datname2, source = '103',
                     channels = shnk2chan, dref=None)
    #==============================================================================#    

    #=============================== GENERATE NEW PRM FILES =======================#    
    # Copy template prm file, edit relevant lines, produce specific prm file for each shank     

    # for shank1                                                                        
    prmname1 = folderpath + '/shank1/' + dfold + '_shank1.prm'
    replacements = {"'expfile'":"'"+dfold+"_shank1'",
    "'probefile.prb'":"'"+ddir+"RK90_shank1.prb'","n_channels=n":"n_channels=12"}
    with open(ddir + 'RK90_template.prm') as f, open(prmname1, 'w') as fcopy:
        for line in f:
            for oldstr, newstr in replacements.items():
                line = line.replace(oldstr,newstr)
            fcopy.write(line)

    # for shank2                                                                        
    prmname2 = folderpath + '/shank2/' + dfold + '_shank2.prm'
    replacements = {"'expfile'":"'"+dfold+"_shank2'",
    "'probefile.prb'":"'"+ddir+"RK90_shank2.prb'","n_channels=n":"n_channels=16"}
    with open(ddir + 'RK90_template.prm') as f, open(prmname2, 'w') as fcopy:
        for line in f:
            for oldstr, newstr in replacements.items():
                line = line.replace(oldstr,newstr)
            fcopy.write(line)
